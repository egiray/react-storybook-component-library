{"version":3,"sources":["components/Menu/index.js","components/Card/index.js","components/Container/index.js","components/List/index.js","components/GamePlay/index.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","menuItems","react_default","a","createElement","className","undefined","length","map","item","key","id","onClick","categoryChange","name","href","toLowerCase","cardStyles","image","width","height","Card","title","assetList","thumb","pop","gameChange","src","alt","style","display","flexWrap","Container","children","List","_useState","useState","cardData","_useState2","Object","slicedToArray","listItems","setListItems","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","result","data","wrap","_context","prev","next","axios","get","concat","category","sent","stop","apply","this","arguments","fetchData","console","log","components_Container","components_Card","assign","url","GamePlay","Fragment","App","setCategory","_useState3","_useState4","game","setGame","components_Menu","components_GamePlay","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.678d6ba9.chunk.js","sourcesContent":["import React from 'react';\nimport './Menu.css'\nconst Menu = props => {\n  const menuItems = props.menuItems\n\n\n  return (\n    <ul className=\"navigation\">\n        {(menuItems !== undefined || menuItems.length > 0) &&\n          menuItems.map(item=> (\n            <li \n              key={item.id} \n              onClick={()=>props.categoryChange(item.name)}\n            ><a href={\"/\"+item.name.toLowerCase()}>\n              {item.name}\n              </a>\n            </li>\n          ))\n        }\n    </ul>\n  );\n};\n\nexport default Menu;","import React from 'react'\nimport './Card.css'\n\nconst Card = props => {\n  const {title, assetList}  = props;\n  const thumb = (assetList !== undefined && assetList.length > 0) ? assetList.pop().name : \"\"\n  \n  return (\n    <div onClick={()=>props.gameChange(props)} className=\"cardContainer\">\n      \n      <img src={thumb} alt=\"\" style={cardStyles.image}/>\n      <span>{title}</span>\n    </div>\n  )\n}\n\nconst cardStyles = {\n  image: {\n    width: 200,\n    height: 200\n  }\n}\n\nexport default Card\n","import React from 'react'\n\nconst Container = props => {\n  return (\n    <div style={style}>\n      {props.children}\n    </div>\n  )\n}\n\nconst style = {\n  display: \"flex\",\n  flexWrap : \"wrap\"\n}\n\n\n\nexport default Container\n","import React, { useState, useEffect } from 'react'\nimport Card from '../Card'\nimport axios from 'axios'\nimport cardData from './List.data.json'\nimport './List.css'\nimport Container from '../Container'\n\nconst List = props => {\n  const [listItems, setListItems] = useState(cardData)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios.get(`https://catalog.api.gamedistribution.com/api/v1.0/rss/All/?collection=best&categories=${props.category}&type=all&amount=24&page=1&format=json`);\n      const data = result.data\n      if(data !== undefined && data.length)\n        setListItems(result.data);\n    };\n\n    fetchData();\n    console.log(\"listItems\")\n  }, [props.category]);\n\n  return (\n    <Container className=\"Gallery\">\n      {(listItems.length > 0) ? listItems.map(item => <Card key={item.url} {...item} gameChange={props.gameChange} />) : 'empty'}\n    </Container>\n  )\n}\n\nexport default List\n","import React from 'react';\n\n\nconst GamePlay = props => {\n  return (\n    <>\n      <div>{props.title}</div>\n      <iframe title={props.title} width={props.width} height={props.height} src={props.url}/>\n    </>\n    \n  )\n}\n\nGamePlay.propTypes = {\n\n}\n\nexport default GamePlay\n","import React, { useState } from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport List from './components/List'\nimport menuItems from './components/Menu/MenuItems.json'\nimport GamePlay from './components/GamePlay'\n\nfunction App() {\n  const [category, setCategory] = useState('All')\n  const [game, setGame] = useState();\n\n  const handleCategoryChange = category => {\n    setCategory(category)\n    setGame()\n  };\n  const handleGameChange = game => {\n    console.log(game) \n    setGame(game)\n  }\n  \n\n  return (\n    <div className=\"App\">\n      <header>\n        <Menu menuItems={menuItems} categoryChange={handleCategoryChange}/>\n      </header>\n      <main>\n        {!game ? \n          <List category={category} gameChange={handleGameChange}/>\n        :\n          <GamePlay {...game}/>\n        }\n        \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}