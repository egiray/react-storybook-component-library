"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Nav = _interopRequireDefault(require("../src/Nav"));

var _Navbar = _interopRequireDefault(require("../src/Navbar"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Nav>', function () {
  var mountPoint;
  beforeEach(function () {
    mountPoint = document.createElement('div');
    document.body.appendChild(mountPoint);
  });
  afterEach(function () {
    document.body.removeChild(mountPoint);
  });
  it('Should set the correct item active', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
      variant: "pills",
      defaultActiveKey: 1
    }, _react.default.createElement(_Nav.default.Link, {
      eventKey: 1
    }, "Pill 1 content"), _react.default.createElement(_Nav.default.Link, {
      eventKey: 2
    }, "Pill 2 content")));
    var items = wrapper.find('a.nav-link');
    assert.ok(items.at(0).is('.active'));
    assert.notOk(items.at(1).is('.active'));
  });
  it('Should adds variant class', function () {
    (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
      variant: "tabs"
    }, _react.default.createElement(_Nav.default.Link, {
      eventKey: 1
    }, "Pill 1 content"), _react.default.createElement(_Nav.default.Link, {
      eventKey: 2
    }, "Pill 2 content"))).assertSingle('div.nav.nav-tabs');
  });
  it('Should adds justified class', function () {
    (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
      justify: true
    }, _react.default.createElement(_Nav.default.Link, {
      eventKey: 1
    }, "Pill 1 content"), _react.default.createElement(_Nav.default.Link, {
      eventKey: 2
    }, "Pill 2 content"))).assertSingle('div.nav.nav-justified');
  });
  it('Should adds fill class', function () {
    (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
      fill: true
    }, _react.default.createElement(_Nav.default.Link, {
      eventKey: 1
    }, "Pill 1 content"), _react.default.createElement(_Nav.default.Link, {
      eventKey: 2
    }, "Pill 2 content"))).assertSingle('div.nav.nav-fill');
  });
  it('Should be navbar aware', function () {
    (0, _enzyme.mount)(_react.default.createElement(_Navbar.default, null, _react.default.createElement(_Nav.default, null, _react.default.createElement(_Nav.default.Link, {
      eventKey: 1
    }, "Pill 1 content"), _react.default.createElement(_Nav.default.Link, {
      eventKey: 2
    }, "Pill 2 content")))).assertSingle('div.navbar-nav');
  });
  it('Should call on select when item is selected', function (done) {
    function handleSelect(key) {
      assert.equal(key, '2');
      done();
    }

    (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
      onSelect: handleSelect
    }, _react.default.createElement(_Nav.default.Link, {
      eventKey: 1
    }, "Tab 1 content"), _react.default.createElement(_Nav.default.Link, {
      eventKey: 2
    }, _react.default.createElement("span", null, "Tab 2 content")))).find('a').last().simulate('click');
  });
  it('Should set the correct item active by href', function () {
    (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
      defaultActiveKey: "#item1"
    }, _react.default.createElement(_Nav.default.Link, {
      href: "#item1",
      className: "test-selected"
    }, "Pill 1 content"), _react.default.createElement(_Nav.default.Link, {
      href: "#item2"
    }, "Pill 2 content"))).assertSingle('a.test-selected.active');
  });
  it('Should warn when attempting to use a justify navbar nav', function () {
    (0, _helpers.shouldWarn)('justify navbar `Nav`s are not supported');
    (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
      navbar: true,
      justify: true
    }));
  });
  describe('keyboard navigation', function () {
    var instance;
    var selectSpy;
    beforeEach(function () {
      selectSpy = sinon.spy(function (activeKey) {
        instance.setProps({
          activeKey: activeKey
        });
      });
      instance = (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
        activeKey: 1,
        onSelect: selectSpy,
        role: "tablist"
      }, _react.default.createElement(_Nav.default.Link, {
        eventKey: 1
      }, "Nav.Link 1 content"), _react.default.createElement(_Nav.default.Link, {
        eventKey: 2,
        disabled: true
      }, "Nav.Link 2 content"), _react.default.createElement(_Nav.default.Link, {
        eventKey: 3
      }, "Nav.Link 3 content"), _react.default.createElement(_Nav.default.Link, {
        eventKey: 4,
        disabled: true
      }, "Nav.Link 4 content"), _react.default.createElement(_Nav.default.Link, {
        eventKey: 5
      }, "Nav.Link 5 content")), {
        attachTo: mountPoint
      });
    });
    afterEach(function () {
      return instance.unmount();
    });
    it('only the active tab should be focusable', function () {
      var links = instance.find('a').map(function (n) {
        return n.getDOMNode();
      });
      expect(links[0].getAttribute('tabindex')).to.not.equal('-1');
      expect(links[1].getAttribute('tabindex')).to.equal('-1');
      expect(links[2].getAttribute('tabindex')).to.equal('-1');
      expect(links[3].getAttribute('tabindex')).to.equal('-1');
      expect(links[4].getAttribute('tabindex')).to.equal('-1');
    });
    it('should focus the next tab on arrow key', function () {
      var anchors = instance.find('a');
      anchors.at(0).tap(function (a) {
        return a.getDOMNode().focus();
      }).simulate('keydown', {
        key: 'ArrowRight'
      });
      expect(instance.prop('activeKey')).to.equal('3');
      expect(document.activeElement).to.equal(anchors.at(2).getDOMNode());
    });
    it('should focus the previous tab on arrow key', function () {
      instance.setProps({
        activeKey: 5
      });
      var anchors = instance.find('a');
      anchors.at(4).tap(function (a) {
        return a.getDOMNode().focus();
      }).simulate('keydown', {
        key: 'ArrowLeft'
      });
      expect(instance.prop('activeKey')).to.equal('3');
      expect(document.activeElement).to.equal(anchors.at(2).getDOMNode());
    });
    it('should wrap to the next tab on arrow key', function () {
      instance.setProps({
        activeKey: 5
      });
      var anchors = instance.find('a');
      anchors.at(4).tap(function (a) {
        return a.getDOMNode().focus();
      }).simulate('keydown', {
        key: 'ArrowDown'
      });
      expect(instance.prop('activeKey')).to.equal('1');
      expect(document.activeElement).to.equal(anchors.at(0).getDOMNode());
    });
    it('should wrap to the previous tab on arrow key', function () {
      var anchors = instance.find('a');
      anchors.at(0).tap(function (a) {
        return a.getDOMNode().focus();
      }).simulate('keydown', {
        key: 'ArrowUp'
      });
      expect(instance.prop('activeKey')).to.equal('5');
      expect(document.activeElement).to.equal(anchors.at(4).getDOMNode());
    });
  });
  describe('Web Accessibility', function () {
    it('Should have tablist and tab roles', function () {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Nav.default, {
        role: "tablist"
      }, _react.default.createElement(_Nav.default.Link, {
        key: 1
      }, "Tab 1 content"), _react.default.createElement(_Nav.default.Link, {
        key: 2
      }, "Tab 2 content")));
      wrapper.assertSingle('div[role="tablist"]');
      wrapper.find('a[role="tab"]').length.should.equal(2);
    });
  });
});

//# sourceMappingURL=NavSpec.js.map